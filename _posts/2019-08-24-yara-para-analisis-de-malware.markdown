---
layout:     post
title:      "YARA para analisis de malware"
subtitle:   ""
date:       2019-12-16 12:00:00
author:     "Ruth Esmeralda Barbacil"
header-img: "img/post_head.jpg"
categories: webmarketing
---

<p><a href="https://github.com/Yara-Rules/rules">YARA</a> es un método estático (es decir, no necesitamos ejecutar nada) para poder identificar archivos basado en sus características. Fue creado con la idea de que existen patrones que identifican a una familia de manera concisa, y que con YARA podríamos detectarlas.</p>

<h2 class="section-heading">Sintaxis</h2>

<p>Las reglas son en formato diccionario. Cada regla comienza con la palabra rule y un identificador, y contiene tres partes principales:</p>

<ol>
	<li><p>Meta</p></li>
	<li><p>Strings</p></li>
	<li><p>Condiciones</p></li>
</ol>

<code>
	rule someRAT : RAT
{
    meta:
        author = "John Doe"
        date = "2019/09"
    strings:
        $v1 = "DecodeProductKey" nocase
        $v2 = "Uninstall" nocase
    condition:
        all of ($v*)
}
</code>

<h2 class="section-heading">Meta</h2>

<p>La meta es la sección de metadata, es decir, datos sobre la regla en sí.</p>

<h2 class="section-heading">Strings</h2>

<p>En esta secciòn se definen los conjuntos de caracteres que se buscará en los archivos. En el caso de ejemplo, uno de los conjuntos a buscar es el string "DecodeProductKey", al cual se le asigna la variable $v1. Si este y el string "Uninstall", es decir, la variable $v2 es encontrado en el archivo, entonces el resultado de procesar esta regla será verdadero (debido a la condición definida en esta regla). El string "nocase" indica un tipo de dato, y es una palabra reservada para yara. Estos son modificadores de los strings, indicando que tipo de dato es. Se pueden utilizar reglas de yara para buscar strings del tipo hexadecimal, texto y expresiones regulares con modificadores "nocase" "fullword", "wide" y "ascii".</p>

<h2 class="section-heading">Conditions</h2>

<p>La sección de condiciones es obligatoria (las otras pueden no estar). En esta sección se define cuando unan regla devuelve verdadero ante un analisis de un archivo. Contienen una expresión booleana (es decir, devuelve verdadero o falso) y por tanto puede contener cualquier operador lógico (and, or, not) y operadores relacionales (>=, <=, <, >, == y !=).</p>

<p>En las condiciones, se puede poner tanto detalle como se quiera, desde el tamaño del archivo o un sector del archivo, hasta añadir otras reglas.</p>

<h2 class="section-heading">Cómo crear reglas</h2>

<p>Crear reglas de yara es algo bastante simple de hacer manualmente, pero si llega a ser necesario identificar muchos archivos, esto se vuelve muy costoso. Para estos casos podemos utilizar <a href="https://github.com/Neo23x0/yarGen">yarGen</a></p>

<p>Para crear una regla en base a ciertos archivos ejecutar:</p>

<code>
	python yarGen.py --help
	python yarGen.py -m /home/osboxes/Downloads -o ammyadmin
</code>

<p>El parametro <em>--excludegood</em> excluye los strings conocidos en sw no malicioso.</p>

<h2 class="section-heading">Cómo crear reglas</h2>

<p>Dependiendo de lo que se necesite y para que se use yargen, el costo de tener muchos falsos positivos o falsos negativos puede ser muy alto. Por eso debemos tener en consideración cuales son los niveles aceptables de calidad de estas reglas.</p>

<h2 class="section-heading">Test de reglas</h2>
<h2 class="section-heading">Usando YARA en el mundo real</h2>